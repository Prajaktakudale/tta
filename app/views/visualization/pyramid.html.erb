<head xmlns="http://www.w3.org/1999/html">
</head>


<body>
<div id="title">
  <%= render :file=> '/home/header.html.erb' %>
  <div class="page_title">
    <h1>Pyramid View</h1>

  </div>
  <% if flash[:no_test_error]!=nil %>
    <p class="error"><%= flash[:no_test_error] %><br></p>
  <% end %>
  <div id="sub_project_picker">
    <h2>Select Sub-Project to get Test-Pyramid</h2>
    <%= form_tag ({:action => 'sub_project_filter'}) do %>
      <div class="fields" >
        <label for="sub_project">Sub-Project:</label>
        <%= select("sub_project", "id", SubProject.all.collect {|p| [ p.name, p.id ] } ,{:include_blank => true}) %>
        <p class="error"><%= flash[:no_id_error] if flash[:no_id_error] %></p>
        <br>
      </div>
      <div id="submit-project-button">
        <button id="submit-btn">Plot</button>
        <%= submit_tag nil,{:class => "hidden",:id=>"form-submit"}%>
      </div>
    <% end %>
  </div>
  <% if @json and flash[:no_test_error]==nil %>

    <%= render 'layouts/pyramid_partial' %>
  <% end %>

  <script type="text/javascript">
    $(document).ready(function(){

      var plotPyramid = function(obj){
        var typeOfTests = obj.test_types,
          templates = new Template(),
          legendTemplate = templates.getLegendItem(),
          legendData="",
          pyramidItemTemplate = templates.getPyramidItem(),
          pyramidItems=[];
        for(var index = 0, len = typeOfTests.length;index<len;index++){
          if(typeOfTests[index].percent == 0.0)
            continue;
          var testName = typeOfTests[index].test_name,
            pyramidItemTemplate=templates.getPyramidItem();
          pyramidItemTemplate = templates.render(pyramidItemTemplate,{
            "TestTypeRegion": testName.split(' ')[0].toLowerCase()+"_region",
            "TestTypePercent": testName.split(' ')[0].toLowerCase()+"_percent",
            "PercentValue": typeOfTests[index].percent,
            "TestTypeDuration": testName.split(' ')[0].toLowerCase()+"_duration",
            "DurationValue": typeOfTests[index].duration,
            "TestTypeTest": testName.split(' ')[0].toLowerCase()+"_test"
          });
          pyramidItems.push({"testName":testName.split(' ')[0].toLowerCase(),
            "testPyramidTriangle":$(pyramidItemTemplate)});

          legendData+=templates.render(legendTemplate,{
            "TestType": (testName).split(' ')[0].toLowerCase(),
            "TestTypeRect": (testName).split(' ')[0].toLowerCase()+"_rect",
            "TestTypeTitle": testName.toLowerCase()
          });

        }
        $('#legend').html(legendData);
        console.log(pyramidItems);
        var parentTriangle = pyramidItems[0].testPyramidTriangle;
        console.log(parentTriangle.find("#"+pyramidItems[0].testName + "_test"));
        temp = parentTriangle;
        for(var index= 1,len = pyramidItems.length;index<len;index++){
          temp = temp.find("#"+pyramidItems[index-1].testName + "_test").html(pyramidItems[index].testPyramidTriangle);
        }
        console.log(parentTriangle);
        $("#pyramid").html(parentTriangle);
        debugger;

        var bodyHeight = $('body').css('height'),
          bodyWidth = $('body').css('width'),
          unitTriangleHeight = parseInt(bodyHeight)*parseInt(obj.test_types[1].percent)/100;
        var baseTriangleHeight = parseInt(bodyHeight)/2;

        if (unitTriangleHeight!=0)
          unitTriangleHeight=baseTriangleHeight;
        var
          integrationTriangleHeight = parseInt(baseTriangleHeight)*(parseInt(obj.test_types[0].percent)+parseInt(obj.test_types[2].percent))/100,
          functionalTriangleHeight = parseInt(baseTriangleHeight)*parseInt(obj.test_types[0].percent)/100;
        $("#pyramidn").css({
          "width":baseTriangleHeight,
          "height":baseTriangleHeight
        } );
        $("#unit_test").css({
          "border-bottom-width": unitTriangleHeight+"px",
          "border-left-width":unitTriangleHeight+"px",
          "border-right-width":unitTriangleHeight+"px"
        });
        $("#integration_test").css({
          "border-bottom-width": integrationTriangleHeight+"px",
          "border-left-width":integrationTriangleHeight+"px",
          "border-right-width":integrationTriangleHeight+"px",
          "margin-left": -1*integrationTriangleHeight+"px"

        });
        $("#functional_test").css({
          "border-bottom-width": functionalTriangleHeight+"px",
          "border-left-width":functionalTriangleHeight+"px",
          "border-right-width":functionalTriangleHeight+"px",
          "margin-left": -1 *functionalTriangleHeight+"px"
        });
        $("#unit_region").css({
          "width":unitTriangleHeight*2+"px"
        } );
        console.log($("#pyramid").css("width"))
        $("#functional_percent,#functional_duration").css({
          "top":parseInt(obj.test_types[0].percent)/2+"%"
        } );
        $("#functional_percent").css({
          "left":((parseInt($("#pyramid").css("width"))/3)-functionalTriangleHeight)+"px"
        } );
        $("#functional_duration").css({
          "right":((parseInt($("#pyramid").css("width"))/3)-functionalTriangleHeight)+"px"
        } );
        $("#integration_percent,#integration_duration").css({
          "top":(parseInt(obj.test_types[2].percent)+parseInt(obj.test_types[0].percent))/2+"%"
        } );
        $("#integration_percent").css({
          "left":((parseInt($("#pyramid").css("width"))/3)-integrationTriangleHeight)+"px"
        } );
        $("#integration_duration").css({
          "right":((parseInt($("#pyramid").css("width"))/3)-integrationTriangleHeight)+"px"
        } );
        $("#unit_percent").css({
          "left":((parseInt($("#pyramid").css("width"))/3)-unitTriangleHeight)-20+"px"
        } );
        $("#unit_duration").css({
          "right":((parseInt($("#pyramid").css("width"))/3)-unitTriangleHeight)-40+"px"
        } );
        return false;
      }
      var jsonR="";
      $("#submit-btn").off('click').on('click',function(e){
        debugger;
        $("form-submit").click();
        var regExp = new RegExp("&quot;",'g');
        jsonR=("<%= @json.to_json %>");
        jsonR = jsonR.replace(regExp,"\"");
        jsonR=JSON.parse(jsonR);
        plotPyramid(jsonR);
        console.log("********** NExt project **********");
        console.log(jsonR);

        return false;
      });
    });
  </script>

</div>
</body>

<script type="text/javascript" src="../javascripts/util/templates.js"></script>
